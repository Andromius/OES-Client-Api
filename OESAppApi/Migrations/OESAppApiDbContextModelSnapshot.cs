// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace OESAppApi.Migrations
{
    [DbContext(typeof(OESAppApiDbContext))]
    partial class OESAppApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ABC12",
                            Description = "You will learn basic skill about python",
                            Name = "Python",
                            ShortName = "P"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ABC21",
                            Color = "0xffec6337",
                            Description = "You will learn basic skill about english",
                            Name = "English",
                            ShortName = "E"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CBA12",
                            Color = "0xff00ff00",
                            Description = "You will learn basic skill about java",
                            Name = "Java",
                            ShortName = "J"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Courses.CourseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseItemType")
                        .HasColumnType("integer")
                        .HasColumnName("CourseItemType");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseItem");

                    b.HasDiscriminator<int>("CourseItemType").HasValue(3);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Courses.CourseXUser", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseXUser");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            UserId = 3,
                            UserRole = 1
                        },
                        new
                        {
                            CourseId = 2,
                            UserId = 3,
                            UserRole = 1
                        },
                        new
                        {
                            CourseId = 3,
                            UserId = 3,
                            UserRole = 1
                        },
                        new
                        {
                            CourseId = 1,
                            UserId = 2,
                            UserRole = 0
                        },
                        new
                        {
                            CourseId = 2,
                            UserId = 2,
                            UserRole = 0
                        },
                        new
                        {
                            CourseId = 3,
                            UserId = 2,
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Devices.DevicePlatform", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DevicePlatform");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            PlatformName = "Other"
                        },
                        new
                        {
                            Id = 1,
                            PlatformName = "Android"
                        },
                        new
                        {
                            Id = 2,
                            PlatformName = "iOS"
                        },
                        new
                        {
                            Id = 3,
                            PlatformName = "Windows"
                        },
                        new
                        {
                            Id = 4,
                            PlatformName = "MacOS"
                        },
                        new
                        {
                            Id = 5,
                            PlatformName = "Linux"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkScore", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "HomeworkId");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkScore");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeworkSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkSubmissionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("HomeworkSubmissionAttachment");
                });

            modelBuilder.Entity("Domain.Entities.Questions.Options.Option", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            Points = 3,
                            Text = "Opt A"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 1,
                            Points = 0,
                            Text = "Opt B"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 1,
                            Points = 0,
                            Text = "Opt C"
                        },
                        new
                        {
                            Id = 1,
                            QuestionId = 2,
                            Points = 3,
                            Text = "Opt A"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 2,
                            Points = -3,
                            Text = "Opt B"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 2,
                            Points = 3,
                            Text = "Opt C"
                        },
                        new
                        {
                            Id = 1,
                            QuestionId = 4,
                            Points = 1,
                            Text = "Yes"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 4,
                            Points = 0,
                            Text = "No"
                        },
                        new
                        {
                            Id = 1,
                            QuestionId = 5,
                            Points = 2,
                            Text = "Of course"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 5,
                            Points = -2,
                            Text = "Of course not"
                        },
                        new
                        {
                            Id = 3,
                            QuestionId = 5,
                            Points = 2,
                            Text = "Jebu ti mamu"
                        },
                        new
                        {
                            Id = 4,
                            QuestionId = 5,
                            Points = 0,
                            Text = "Hele cudlik!!!"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "What is hello?",
                            ItemId = 1,
                            Name = "Question 1",
                            Points = 3,
                            Type = "pick-one"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pick many question.",
                            ItemId = 1,
                            Name = "Question 2",
                            Points = 6,
                            Type = "pick-many"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Write hello.",
                            ItemId = 1,
                            Name = "Question 3",
                            Points = 10,
                            Type = "open"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Write hello.",
                            ItemId = 2,
                            Name = "Question YESNO",
                            Points = 1,
                            Type = "pick-one"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kaja je dobry programator",
                            ItemId = 2,
                            Name = "Question YESNO",
                            Points = 4,
                            Type = "pick-many"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Sessions.Session", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DevicePlatformId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWeb")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Token");

                    b.HasIndex("DevicePlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Answers.Answer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestSubmissionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "QuestionId", "TestSubmissionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestSubmissionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Answers.AnswerSimilarity", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubmittorId")
                        .HasColumnType("integer");

                    b.Property<int>("ChallengerId")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.Property<double>("Similarity")
                        .HasColumnType("double precision");

                    b.HasKey("QuestionId", "SubmittorId", "ChallengerId", "SubmissionId");

                    b.HasIndex("ChallengerId");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("SubmittorId");

                    b.ToTable("AnswerSimilarity");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Submissions.Reviews.TestSubmissionReview", b =>
                {
                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("SubmissionId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestSubmissionReview");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Submissions.TestSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Admin",
                            LastName = "Doe",
                            Password = "$2a$11$FZZSQ5J1o8gP2Zs99/nB9elrQQw/d4gv3BvUA9smUmH/8pVQf6LdS",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Teacher",
                            LastName = "Doe",
                            Password = "$2a$11$Gnsr5vx9JbE0/w.pk9Nj.eWMZV7K4iQ4/wZ2beqxonCzhaKU2IugS",
                            Role = 1,
                            Username = "teacher"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Student",
                            LastName = "Doe",
                            Password = "$2a$11$aFHUqATst8eVBk5PDk/GceFfeGvjTrWBv/TYbmSbhFh.ALZOfW2OS",
                            Role = 2,
                            Username = "student"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Alice",
                            LastName = "Doe",
                            Password = "$2a$11$unEXhaGMQDe.7tTNcWG/bOfOBs66xPQYg1VG5ssoUfOPOzv6E.idy",
                            Role = 1,
                            Username = "teachMaster"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Bob",
                            LastName = "Doe",
                            Password = "$2a$11$12MATReeP0yTVQ7KBH9fEeGx3vFkM2AEveedjkabesCp9cB42EMqe",
                            Role = 1,
                            Username = "eduGuru"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Charlie",
                            LastName = "Doe",
                            Password = "$2a$11$pUW8JUKWwiPgkmLzrEGIKe1mS0LCzQqS/LR6kac5wuXICyPxgR8bC",
                            Role = 1,
                            Username = "profLearner"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "David",
                            LastName = "Doe",
                            Password = "$2a$11$33NW6G34Rjz5ssMplGJ1FeqSIJkd7INohxVp4cVqx4EfZQwmtuBHG",
                            Role = 1,
                            Username = "learnSculptor"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Ella",
                            LastName = "Doe",
                            Password = "$2a$11$gLRi31X3/0vetn6.pg5w4OGkwDudg8D/hn0Jl18olYtDUcbLJxKQu",
                            Role = 1,
                            Username = "knowledgeNinja"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Frank",
                            LastName = "Doe",
                            Password = "$2a$11$6xH476tdnWpLKaUfmO74d.jlvXaijkk4cvR5lA/xEwvD1aTQB0tm.",
                            Role = 1,
                            Username = "scholarSavvy"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Grace",
                            LastName = "Doe",
                            Password = "$2a$11$RYI91ofW2s.utD8SE/q75O/XnueHgNM3AL4lI.gMZ7PB2XKEJ5HgO",
                            Role = 1,
                            Username = "eduMaestro"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Hannah",
                            LastName = "Smith",
                            Password = "$2a$11$sfNqPRKYtKrYVD7pBn4lMemE0epZTbsLVtb5hEpTIIvIBbdU/E52e",
                            Role = 1,
                            Username = "brainyTutor"
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Isaac",
                            LastName = "Johnson",
                            Password = "$2a$11$fq28j3rO7zMNmJ5DiDmBieRTg4Ks782Im6SrnjrkNkFm5CvTFz5cq",
                            Role = 1,
                            Username = "wisdomWhiz"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.Homework", b =>
                {
                    b.HasBaseType("Domain.Entities.Courses.CourseItem");

                    b.Property<DateTime>("End")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Scheduled")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Domain.Entities.Notes.Note", b =>
                {
                    b.HasBaseType("Domain.Entities.Courses.CourseItem");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Domain.Entities.Quizzes.Quiz", b =>
                {
                    b.HasBaseType("Domain.Entities.Courses.CourseItem");

                    b.Property<DateTime>("End")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Scheduled")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(4);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CourseId = 3,
                            CourseItemType = 0,
                            Created = new DateTime(2024, 4, 14, 23, 0, 56, 970, DateTimeKind.Utc).AddTicks(7898),
                            IsVisible = true,
                            Name = "AMAZING QUIZ",
                            UserId = 1,
                            End = new DateTime(2024, 4, 15, 2, 0, 56, 970, DateTimeKind.Utc).AddTicks(7909),
                            Scheduled = new DateTime(2024, 4, 14, 23, 30, 56, 970, DateTimeKind.Utc).AddTicks(7904)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tests.Test", b =>
                {
                    b.HasBaseType("Domain.Entities.Courses.CourseItem");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Scheduled")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 3,
                            CourseItemType = 0,
                            Created = new DateTime(2024, 4, 14, 23, 0, 56, 971, DateTimeKind.Utc).AddTicks(4148),
                            IsVisible = true,
                            Name = "Write 100x hello!",
                            UserId = 1,
                            Duration = 1800,
                            End = new DateTime(2024, 4, 15, 2, 0, 56, 971, DateTimeKind.Utc).AddTicks(4157),
                            MaxAttempts = 3,
                            Password = "password",
                            Scheduled = new DateTime(2024, 4, 14, 23, 30, 56, 971, DateTimeKind.Utc).AddTicks(4151)
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserQuizzes.UserQuiz", b =>
                {
                    b.HasBaseType("Domain.Entities.Courses.CourseItem");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Domain.Entities.Courses.CourseItem", b =>
                {
                    b.HasOne("Domain.Entities.Courses.Course", "Course")
                        .WithMany("CourseItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("CourseItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Courses.CourseXUser", b =>
                {
                    b.HasOne("Domain.Entities.Courses.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkScore", b =>
                {
                    b.HasOne("Domain.Entities.Homeworks.Homework", "Homework")
                        .WithMany("Scores")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("HomeworkScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Homeworks.Homework", "Homework")
                        .WithMany("Submissions")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("HomeworkSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkSubmissionAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Homeworks.HomeworkSubmission", "Submission")
                        .WithMany("Attachments")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Entities.Questions.Options.Option", b =>
                {
                    b.HasOne("Domain.Entities.Questions.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Questions.Question", b =>
                {
                    b.HasOne("Domain.Entities.Courses.CourseItem", "Item")
                        .WithMany("Questions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.Sessions.Session", b =>
                {
                    b.HasOne("Domain.Entities.Devices.DevicePlatform", "DevicePlatform")
                        .WithMany()
                        .HasForeignKey("DevicePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevicePlatform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Answers.Answer", b =>
                {
                    b.HasOne("Domain.Entities.Questions.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tests.Submissions.TestSubmission", "TestSubmission")
                        .WithMany("Answers")
                        .HasForeignKey("TestSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TestSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Answers.AnswerSimilarity", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "Challenger")
                        .WithMany()
                        .HasForeignKey("ChallengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Questions.Question", "Question")
                        .WithMany("AnswerSimilarities")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tests.Submissions.TestSubmission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "Submittor")
                        .WithMany()
                        .HasForeignKey("SubmittorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenger");

                    b.Navigation("Question");

                    b.Navigation("Submission");

                    b.Navigation("Submittor");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Submissions.Reviews.TestSubmissionReview", b =>
                {
                    b.HasOne("Domain.Entities.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tests.Submissions.TestSubmission", "Submission")
                        .WithMany("Reviews")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Submissions.TestSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Tests.Test", "Test")
                        .WithMany("Submissions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Courses.Course", b =>
                {
                    b.Navigation("CourseItems");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Courses.CourseItem", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.HomeworkSubmission", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Questions.Question", b =>
                {
                    b.Navigation("AnswerSimilarities");

                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Submissions.TestSubmission", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("CourseItems");

                    b.Navigation("Courses");

                    b.Navigation("HomeworkScores");

                    b.Navigation("HomeworkSubmissions");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Domain.Entities.Homeworks.Homework", b =>
                {
                    b.Navigation("Scores");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Domain.Entities.Tests.Test", b =>
                {
                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
